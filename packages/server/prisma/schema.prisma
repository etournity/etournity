generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id          String   @id @default(cuid())
  name        String
  size        Int
  secret      String   @unique
  contentType String
  createdAt   DateTime
  updatedAt   DateTime
  url         String   @unique
  game        Game?
}

model User {
  id                  String        @id @default(cuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  displayName         String
  roles               String[]
  permissions         String[]
  hideAlphaDisclaimer Boolean       @default(false)
  messages            ChatMessage[]
  gameUsers           GameUser[]    @relation("UserToGameUsers")
  participants        Participant[] @relation("UserToParticipant")
  assignedTickets     Ticket[]      @relation("assignee")
  ticket              Ticket[]      @relation("reported")
  reportedTickets     Ticket[]      @relation("reporter")
  linkedAccounts      UserAccount[] @relation("UserToAccount")
  chatRooms           ChatRoom[]    @relation("ChatRoomToUser")
}

model Game {
  id          String       @id @default(cuid())
  title       String
  verified    Boolean      @default(false)
  supported   Boolean      @default(false)
  homepage    String?
  imageId     String?      @unique
  image       Image?       @relation(fields: [imageId], references: [id])
  gameUsers   GameUser[]   @relation("GameToGameUsers")
  tournaments Tournament[]
  gameMode    GameMode[]   @relation("GameToGameMode")
}

model GameUser {
  id         String  @id @default(cuid())
  userId     String?
  gameId     String
  inGameName String
  elo        Int
  game       Game    @relation("GameToGameUsers", fields: [gameId], references: [id])
  user       User?   @relation("UserToGameUsers", fields: [userId], references: [id])

  @@unique([userId, gameId], name: "GameUser_userId_gameId_key")
}

model UserAccount {
  id            String  @id @default(cuid())
  ownerId       String
  provider      String
  userId        String
  username      String
  avatar        String?
  discriminator String
  email         String?
  verified      Boolean
  locale        String
  mfaEnabled    Boolean
  fetchedAt     String
  accessToken   String
  refreshToken  String
  owner         User    @relation("UserToAccount", fields: [ownerId], references: [id])

  @@unique([ownerId, provider], name: "UserAccount_ownerId_provider_key")
  @@unique([userId, provider], name: "UserAccount_userId_provider_key")
}

model Tournament {
  id           String           @id @default(cuid())
  title        String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  publishedAt  DateTime?
  description  String?
  date         DateTime
  gameId       String
  gameModeId   String
  status       TournamentStatus @default(DRAFT)
  languageCode String?
  regionCode   String?
  discordLink  String?
  supportLink  String?
  streamLink   String?
  rules        String
  maxPlayers   Int?
  checkinStart DateTime?
  checkinEnd   DateTime?
  noShow       Int              @default(10)
  prizePool    String?
  chatRoom     ChatRoom?
  participants Participant[]
  stages       Stage[]
  Team         Team[]
  tickets      Ticket[]
  game         Game             @relation(fields: [gameId], references: [id])
  gameMode     GameMode         @relation(fields: [gameModeId], references: [id])
  language     Language?        @relation(fields: [languageCode], references: [code])
  region       Region?          @relation(fields: [regionCode], references: [code])
  platforms    Platform[]       @relation("PlatformToTournament")
}

model GameMode {
  id         String       @id @default(cuid())
  name       String
  teamSize   Int?
  tournament Tournament[]
  games      Game[]       @relation("GameToGameMode")
}

model Language {
  code        String       @id
  name        String
  tournaments Tournament[]
}

model Participant {
  id            String            @id @default(cuid())
  userId        String
  registeredAt  DateTime?         @default(now())
  checkedInAt   DateTime?
  tournamentId  String?
  teamId        String?
  requestingMod Boolean           @default(false)
  deniedMod     Boolean           @default(false)
  kicked        Boolean           @default(false)
  team          Team?             @relation(fields: [teamId], references: [id])
  tournament    Tournament?       @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user          User              @relation("UserToParticipant", fields: [userId], references: [id])
  roles         ParticipantRole[]
  readyChecks   ReadyCheck[]
  leaderOfTeam  Team[]            @relation("TeamleaderToTeam")

  @@unique([userId, tournamentId], name: "participant_userId_tournamentId_key")
}

model ParticipantRole {
  id            String              @id @default(cuid())
  type          ParticipantRoleType
  participantId String
  participant   Participant         @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model Team {
  id           String        @id @default(cuid())
  name         String
  seed         Int?
  leaderId     String?
  avatar       String?
  tournamentId String
  participants Participant[]
  readyChecks  ReadyCheck[]
  results      Result[]
  submissions  Submission[]
  leader       Participant?  @relation("TeamleaderToTeam", fields: [leaderId], references: [id])
  tournament   Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches      Match[]       @relation("MatchToTeam")

  @@unique([name, tournamentId], name: "team_name_tournamentId_key")
}

model Region {
  code        String       @id
  name        String
  tournaments Tournament[]
}

model Platform {
  code        String       @id
  name        String
  tournaments Tournament[] @relation("PlatformToTournament")
}

model Match {
  id            String       @id @default(cuid())
  number        Int
  status        MatchStatus  @default(SCHEDULED)
  gameLobbyCode String?
  roundId       String?
  inGame        String[]
  noShowTimer   DateTime?
  round         Round?       @relation(fields: [roundId], references: [id])
  matchGames    MatchGame[]
  readyChecks   ReadyCheck[]
  tickets       Ticket[]
  opponents     Team[]       @relation("MatchToTeam")
}

model ReadyCheck {
  id            String      @id @default(cuid())
  checkedInAt   DateTime
  lobbyRole     String
  matchId       String
  participantId String
  teamId        String?
  match         Match       @relation(fields: [matchId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])
  team          Team?       @relation(fields: [teamId], references: [id])

  @@unique([participantId, matchId], name: "readyCheck_participantId_matchId_key")
}

model MatchGame {
  id          String       @id @default(cuid())
  number      Int
  status      GameStatus
  matchId     String
  match       Match        @relation(fields: [matchId], references: [id])
  result      Result[]
  submissions Submission[]
}

model Submission {
  id          String     @id @default(cuid())
  teamId      String
  resubmitted Boolean    @default(false)
  matchGameId String?
  results     Result[]
  matchGame   MatchGame? @relation(fields: [matchGameId], references: [id], onDelete: Cascade)
  team        Team       @relation(fields: [teamId], references: [id])

  @@unique([matchGameId, teamId], name: "submission_matchGameId_teamId_key")
}

model Result {
  id           String      @id @default(cuid())
  score        Int
  teamId       String
  submissionId String?
  matchGameId  String?
  matchGame    MatchGame?  @relation(fields: [matchGameId], references: [id], onDelete: Cascade)
  submission   Submission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  team         Team        @relation(fields: [teamId], references: [id])
}

model Round {
  id      String      @id @default(cuid())
  title   String?
  number  Int         @default(autoincrement())
  format  Int
  stageId String?
  status  RoundStatus @default(UPCOMING)
  locked  Boolean     @default(false)
  matches Match[]
  stage   Stage?      @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([stageId, number], name: "round_stageId_number_key")
}

model Stage {
  id           String     @id @default(cuid())
  title        String?
  number       Int        @default(autoincrement())
  type         StageType
  mode         Int?       @default(1)
  tournamentId String
  rounds       Round[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, number], name: "stage_tournamentId_number_key")
}

model Ticket {
  id           String      @id @default(cuid())
  type         TicketType
  resolved     Boolean     @default(false)
  matchBlocked Boolean?    @default(false)
  message      String?
  verdict      String?
  number       Int?        @default(autoincrement())
  reportedId   String?
  reporterId   String?
  assigneeId   String?
  tournamentId String?
  matchId      String?
  assignee     User?       @relation("assignee", fields: [assigneeId], references: [id])
  match        Match?      @relation(fields: [matchId], references: [id])
  reported     User?       @relation("reported", fields: [reportedId], references: [id])
  reporter     User?       @relation("reporter", fields: [reporterId], references: [id])
  tournament   Tournament? @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, number], name: "ticket_tournament_number_key")
}

model ChatRoom {
  id           String        @id @default(cuid())
  name         String
  archivedAt   DateTime?
  tournamentId String?       @unique
  messages     ChatMessage[]
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  members      User[]        @relation("ChatRoomToUser")
}

model ChatMessage {
  id         String   @id @default(cuid())
  createdAt  DateTime
  authorId   String
  content    String
  chatRoomId String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

enum TournamentStatus {
  DRAFT
  PUBLISHED
  STARTED
  FINISHED
  CANCELLED
  ERROR
}

enum ParticipantRoleType {
  PLAYER
  HOST
  ADMIN
  MODERATOR
}

enum MatchStatus {
  SCHEDULED
  STARTED
  PREP_PHASE
  GAME_PHASE
  DONE
  ERROR
  NO_SHOW
}

enum GameStatus {
  CONFLICT
  WAITING
  SUCCESS
  MANUAL_EDIT
}

enum RoundStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

enum StageType {
  SINGLE
}

enum TicketType {
  SITE_ISSUE
  SCORE_CONFLICT
  PLAYER_NOT_RESPONDING
  GAME_ISSUE
  PLAYER_REPORT
}
