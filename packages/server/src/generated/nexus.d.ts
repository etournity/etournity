/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BestOfInput: { // input type
    bestOf?: number | null; // Int
    roundId?: string | null; // String
  }
  MatchResultInput: { // input type
    matchGameId: string; // ID!
    results?: Array<NexusGenInputs['ResultCreateInput'] | null> | null; // [ResultCreateInput]
  }
  ResultCreateInput: { // input type
    score: number; // Int!
    teamId: string; // ID!
  }
  SubmissionCreateInput: { // input type
    matchGameId: string; // ID!
    number?: number | null; // Int
    results: NexusGenInputs['ResultCreateInput'][]; // [ResultCreateInput!]!
    teamId: string; // ID!
  }
  TournamentCreateInput: { // input type
    checkinEnd?: NexusGenScalars['DateTime'] | null; // DateTime
    checkinStart?: NexusGenScalars['DateTime'] | null; // DateTime
    date: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    gameId: string; // String!
    gameModeId: string; // ID!
    language?: string | null; // ID
    maxPlayers: number; // Int!
    noShow: number; // Int!
    platforms: string[]; // [ID!]!
    prizePool?: string | null; // String
    region?: string | null; // ID
    rules: string; // String!
    streamLink?: string | null; // String
    supportLink?: string | null; // String
    title: string; // String!
    type: NexusGenEnums['StageType']; // StageType!
  }
}

export interface NexusGenEnums {
  GameStatus: "CONFLICT" | "MANUAL_EDIT" | "SUCCESS" | "WAITING"
  MatchStatus: "DONE" | "ERROR" | "GAME_PHASE" | "NO_SHOW" | "PREP_PHASE" | "SCHEDULED" | "STARTED"
  ParticipantRoleType: "ADMIN" | "HOST" | "MODERATOR" | "PLAYER"
  RoundStatus: "ACTIVE" | "COMPLETED" | "UPCOMING"
  StageType: "SINGLE"
  TicketType: "GAME_ISSUE" | "PLAYER_NOT_RESPONDING" | "PLAYER_REPORT" | "SCORE_CONFLICT" | "SITE_ISSUE"
  TournamentStatus: "CANCELLED" | "DRAFT" | "ERROR" | "FINISHED" | "PUBLISHED" | "STARTED"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  ChatMessage: { // root type
    authorId: string; // String!
    chatRoomId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
  }
  ChatRoom: { // root type
    archivedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    name: string; // String!
    tournamentId?: string | null; // String
  }
  Game: { // root type
    homepage?: string | null; // String
    id: string; // ID!
    supported: boolean; // Boolean!
    title: string; // String!
    verified: boolean; // Boolean!
  }
  GameMode: { // root type
    id: string; // ID!
    name: string; // String!
    teamSize?: number | null; // Int
  }
  GameUser: { // root type
    elo: number; // Int!
    gameId: string; // String!
    id: string; // ID!
    inGameName: string; // String!
  }
  Image: { // root type
    contentType: string; // String!
    id: string; // ID!
    name: string; // String!
    secret: string; // String!
    size: number; // Int!
    url: string; // String!
  }
  Language: { // root type
    code: string; // ID!
    name: string; // String!
  }
  Match: { // root type
    gameLobbyCode?: string | null; // String
    id: string; // ID!
    inGame: string[]; // [String!]!
    noShowTimer?: NexusGenScalars['DateTime'] | null; // DateTime
    number: number; // Int!
    status: NexusGenEnums['MatchStatus']; // MatchStatus!
  }
  MatchGame: { // root type
    id: string; // ID!
    matchId: string; // String!
    number: number; // Int!
    status: NexusGenEnums['GameStatus']; // GameStatus!
  }
  Mutation: {};
  Participant: { // root type
    checkedInAt?: NexusGenScalars['DateTime'] | null; // DateTime
    deniedMod: boolean; // Boolean!
    id: string; // ID!
    kicked: boolean; // Boolean!
    registeredAt?: NexusGenScalars['DateTime'] | null; // DateTime
    requestingMod: boolean; // Boolean!
    teamId?: string | null; // String
    tournamentId?: string | null; // String
    userId: string; // String!
  }
  ParticipantRole: { // root type
    id: string; // ID!
    participantId: string; // String!
    type: NexusGenEnums['ParticipantRoleType']; // ParticipantRoleType!
  }
  Platform: { // root type
    code: string; // ID!
    name: string; // String!
  }
  Query: {};
  ReadyCheck: { // root type
    checkedInAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    lobbyRole: string; // String!
    matchId: string; // String!
  }
  Region: { // root type
    code: string; // ID!
    name: string; // String!
  }
  Result: { // root type
    id: string; // ID!
    score: number; // Int!
    submissionId?: string | null; // String
    teamId: string; // String!
  }
  Round: { // root type
    format: number; // Int!
    id: string; // ID!
    locked: boolean; // Boolean!
    number: number; // Int!
    stageId?: string | null; // String
    status: NexusGenEnums['RoundStatus']; // RoundStatus!
    title?: string | null; // String
  }
  Stage: { // root type
    id: string; // ID!
    number: number; // Int!
    title?: string | null; // String
    tournamentId: string; // String!
    type: NexusGenEnums['StageType']; // StageType!
  }
  Submission: { // root type
    id: string; // ID!
    matchGameId?: string | null; // String
    resubmitted: boolean; // Boolean!
    teamId: string; // String!
  }
  Subscription: {};
  Team: { // root type
    id: string; // ID!
    leaderId?: string | null; // String
    name: string; // String!
    seed?: number | null; // Int
  }
  Ticket: { // root type
    id: string; // ID!
    matchBlocked?: boolean | null; // Boolean
    matchId?: string | null; // String
    message?: string | null; // String
    number?: number | null; // Int
    resolved: boolean; // Boolean!
    tournamentId?: string | null; // String
    type: NexusGenEnums['TicketType']; // TicketType!
    verdict?: string | null; // String
  }
  Tournament: { // root type
    checkinEnd?: NexusGenScalars['DateTime'] | null; // DateTime
    checkinStart?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    discordLink?: string | null; // String
    gameId: string; // String!
    gameModeId: string; // String!
    id: string; // ID!
    maxPlayers?: number | null; // Int
    noShow: number; // Int!
    prizePool?: string | null; // String
    publishedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    rules: string; // String!
    status: NexusGenEnums['TournamentStatus']; // TournamentStatus!
    streamLink?: string | null; // String
    supportLink?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    hideAlphaDisclaimer: boolean; // Boolean!
    id: string; // ID!
    permissions: string[]; // [String!]!
    roles: string[]; // [String!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserAccount: { // root type
    accessToken: string; // String!
    avatar?: string | null; // String
    discriminator: string; // String!
    email?: string | null; // String
    fetchedAt: string; // String!
    id: string; // ID!
    locale: string; // String!
    mfaEnabled: boolean; // Boolean!
    provider: string; // String!
    refreshToken: string; // String!
    userId: string; // String!
    username: string; // String!
    verified: boolean; // Boolean!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  ChatMessage: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    chatRoom: NexusGenRootTypes['ChatRoom']; // ChatRoom!
    chatRoomId: string; // String!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
  }
  ChatRoom: { // field return type
    archivedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    members: NexusGenRootTypes['User'][]; // [User!]!
    messages: NexusGenRootTypes['ChatMessage'][]; // [ChatMessage!]!
    name: string; // String!
    tournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    tournamentId: string | null; // String
  }
  Game: { // field return type
    gameUsers: NexusGenRootTypes['GameUser'][]; // [GameUser!]!
    homepage: string | null; // String
    id: string; // ID!
    image: NexusGenRootTypes['Image'] | null; // Image
    supported: boolean; // Boolean!
    title: string; // String!
    tournaments: NexusGenRootTypes['Tournament'][]; // [Tournament!]!
    verified: boolean; // Boolean!
  }
  GameMode: { // field return type
    id: string; // ID!
    name: string; // String!
    teamSize: number | null; // Int
  }
  GameUser: { // field return type
    elo: number; // Int!
    game: NexusGenRootTypes['Game']; // Game!
    gameId: string; // String!
    id: string; // ID!
    inGameName: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Image: { // field return type
    contentType: string; // String!
    game: NexusGenRootTypes['Game'] | null; // Game
    id: string; // ID!
    name: string; // String!
    secret: string; // String!
    size: number; // Int!
    url: string; // String!
  }
  Language: { // field return type
    code: string; // ID!
    name: string; // String!
  }
  Match: { // field return type
    gameLobbyCode: string | null; // String
    id: string; // ID!
    inGame: string[]; // [String!]!
    matchGames: NexusGenRootTypes['MatchGame'][]; // [MatchGame!]!
    noShowTimer: NexusGenScalars['DateTime'] | null; // DateTime
    number: number; // Int!
    opponents: NexusGenRootTypes['Team'][]; // [Team!]!
    readyChecks: NexusGenRootTypes['ReadyCheck'][]; // [ReadyCheck!]!
    round: NexusGenRootTypes['Round'] | null; // Round
    status: NexusGenEnums['MatchStatus']; // MatchStatus!
    supportLink: string | null; // String
    tickets: NexusGenRootTypes['Ticket'][]; // [Ticket!]!
  }
  MatchGame: { // field return type
    finalResults: Array<NexusGenRootTypes['Result'] | null>; // [Result]!
    id: string; // ID!
    match: NexusGenRootTypes['Match']; // Match!
    matchId: string; // String!
    number: number; // Int!
    result: NexusGenRootTypes['Result'][]; // [Result!]!
    status: NexusGenEnums['GameStatus']; // GameStatus!
    submissions: NexusGenRootTypes['Submission'][]; // [Submission!]!
    submissionsEqual: boolean | null; // Boolean
  }
  Mutation: { // field return type
    addLobbyCode: NexusGenRootTypes['Match'] | null; // Match
    addOpponent: NexusGenRootTypes['Match']; // Match!
    addParticipant: NexusGenRootTypes['Participant'] | null; // Participant
    addToInGame: NexusGenRootTypes['Match'] | null; // Match
    changeStatus: NexusGenRootTypes['Match']; // Match!
    checkinParticipant: NexusGenRootTypes['Participant'] | null; // Participant
    closeTicket: NexusGenRootTypes['Ticket'] | null; // Ticket
    createChatMessage: NexusGenRootTypes['ChatMessage'] | null; // ChatMessage
    createGame: NexusGenRootTypes['Game']; // Game!
    createMatch: NexusGenRootTypes['Match']; // Match!
    createMatchGame: NexusGenRootTypes['MatchGame'] | null; // MatchGame
    createOrUpdateGameUser: NexusGenRootTypes['GameUser'] | null; // GameUser
    createReadyCheck: NexusGenRootTypes['ReadyCheck'] | null; // ReadyCheck
    createSavestate: string | null; // String
    createSubmissions: Array<NexusGenRootTypes['Submission'] | null> | null; // [Submission]
    createSystemTicket: NexusGenRootTypes['Ticket']; // Ticket!
    createTeam: NexusGenRootTypes['Team'] | null; // Team
    createTicket: NexusGenRootTypes['Ticket']; // Ticket!
    createTournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    deleteMatch: NexusGenRootTypes['Match'] | null; // Match
    deleteSavestate: boolean | null; // Boolean
    deleteTicket: NexusGenRootTypes['Ticket'] | null; // Ticket
    deleteTournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    generateBrackets: Array<Array<Array<string | null>>>; // [[[String]!]!]!
    kickParticipant: NexusGenRootTypes['Participant'] | null; // Participant
    publishBrackets: Array<NexusGenRootTypes['Round'] | null> | null; // [Round]
    removeOpponent: NexusGenRootTypes['Match']; // Match!
    removeParticipant: NexusGenRootTypes['Participant'] | null; // Participant
    resetMatch: NexusGenRootTypes['Match'] | null; // Match
    resolvePlayerReport: NexusGenRootTypes['Ticket'] | null; // Ticket
    restoreSavestate: string | null; // String
    setCheckIn: NexusGenRootTypes['Tournament'] | null; // Tournament
    setHideDisclaimer: NexusGenRootTypes['User'] | null; // User
    setMatchGameStatus: NexusGenRootTypes['MatchGame'] | null; // MatchGame
    setMatchResults: NexusGenRootTypes['Match'] | null; // Match
    setMatchWinner: NexusGenRootTypes['Match'] | null; // Match
    setRoundStatus: NexusGenRootTypes['Round'] | null; // Round
    setStartTime: NexusGenRootTypes['Tournament'] | null; // Tournament
    setTicketAssignee: NexusGenRootTypes['Ticket']; // Ticket!
    setTournamentStatus: NexusGenRootTypes['Tournament'] | null; // Tournament
    setUsername: NexusGenRootTypes['User'] | null; // User
    updateElo: NexusGenRootTypes['GameUser'] | null; // GameUser
    updateParticipantRoles: NexusGenRootTypes['Participant'] | null; // Participant
    updateSeed: NexusGenRootTypes['Team'] | null; // Team
    updateTournament: NexusGenRootTypes['Tournament'] | null; // Tournament
  }
  Participant: { // field return type
    checkedInAt: NexusGenScalars['DateTime'] | null; // DateTime
    deniedMod: boolean; // Boolean!
    id: string; // ID!
    isCheckedIn: boolean | null; // Boolean
    isCreator: boolean | null; // Boolean
    isCurrentUser: boolean | null; // Boolean
    isHost: boolean | null; // Boolean
    isModerator: boolean | null; // Boolean
    isPlayer: boolean | null; // Boolean
    isReady: boolean | null; // Boolean
    isRegistered: boolean | null; // Boolean
    kicked: boolean; // Boolean!
    readyChecks: NexusGenRootTypes['ReadyCheck'][]; // [ReadyCheck!]!
    registeredAt: NexusGenScalars['DateTime'] | null; // DateTime
    requestingMod: boolean; // Boolean!
    roles: NexusGenRootTypes['ParticipantRole'][]; // [ParticipantRole!]!
    team: NexusGenRootTypes['Team'] | null; // Team
    teamId: string | null; // String
    tournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    tournamentId: string | null; // String
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  ParticipantRole: { // field return type
    id: string; // ID!
    participant: NexusGenRootTypes['Participant']; // Participant!
    participantId: string; // String!
    type: NexusGenEnums['ParticipantRoleType']; // ParticipantRoleType!
  }
  Platform: { // field return type
    code: string; // ID!
    name: string; // String!
  }
  Query: { // field return type
    chatRoomMessages: NexusGenRootTypes['ChatMessage'][]; // [ChatMessage!]!
    gameUsers: Array<NexusGenRootTypes['GameUser'] | null> | null; // [GameUser]
    games: NexusGenRootTypes['Game'][]; // [Game!]!
    isCheckedIn: boolean | null; // Boolean
    isRegistered: boolean | null; // Boolean
    languages: Array<NexusGenRootTypes['Language'] | null> | null; // [Language]
    match: NexusGenRootTypes['Match'] | null; // Match
    matchesInTournament: NexusGenRootTypes['Match'][]; // [Match!]!
    me: NexusGenRootTypes['User'] | null; // User
    participants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    participantsFromTournament: NexusGenRootTypes['Participant'][]; // [Participant!]!
    platforms: NexusGenRootTypes['Platform'][]; // [Platform!]!
    playersFromTournament: NexusGenRootTypes['Participant'][]; // [Participant!]!
    regions: NexusGenRootTypes['Region'][]; // [Region!]!
    relatedChatRooms: NexusGenRootTypes['ChatRoom'][]; // [ChatRoom!]!
    relatedTickets: NexusGenRootTypes['Ticket'][] | null; // [Ticket!]
    savestates: string[]; // [String!]!
    staffFromTournament: NexusGenRootTypes['Participant'][]; // [Participant!]!
    team: NexusGenRootTypes['Team'] | null; // Team
    tickets: Array<NexusGenRootTypes['Ticket'] | null> | null; // [Ticket]
    tournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    tournamentStages: NexusGenRootTypes['Stage'][]; // [Stage!]!
    tournamentTickets: NexusGenRootTypes['Ticket'][]; // [Ticket!]!
    tournaments: Array<NexusGenRootTypes['Tournament'] | null> | null; // [Tournament]
    user: NexusGenRootTypes['User'] | null; // User
    userAccounts: Array<NexusGenRootTypes['UserAccount'] | null> | null; // [UserAccount]
    userParticipants: Array<NexusGenRootTypes['Participant'] | null> | null; // [Participant]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  ReadyCheck: { // field return type
    checkedInAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    lobbyRole: string; // String!
    match: NexusGenRootTypes['Match']; // Match!
    matchId: string; // String!
    participant: NexusGenRootTypes['Participant']; // Participant!
  }
  Region: { // field return type
    code: string; // ID!
    name: string; // String!
  }
  Result: { // field return type
    id: string; // ID!
    score: number; // Int!
    submission: NexusGenRootTypes['Submission'] | null; // Submission
    submissionId: string | null; // String
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
  }
  Round: { // field return type
    completedMatches: number; // Int!
    format: number; // Int!
    id: string; // ID!
    locked: boolean; // Boolean!
    matches: NexusGenRootTypes['Match'][]; // [Match!]!
    number: number; // Int!
    playersInRound: number | null; // Int
    stage: NexusGenRootTypes['Stage'] | null; // Stage
    stageId: string | null; // String
    status: NexusGenEnums['RoundStatus']; // RoundStatus!
    title: string | null; // String
  }
  Stage: { // field return type
    id: string; // ID!
    number: number; // Int!
    rounds: NexusGenRootTypes['Round'][]; // [Round!]!
    title: string | null; // String
    tournament: NexusGenRootTypes['Tournament']; // Tournament!
    tournamentId: string; // String!
    type: NexusGenEnums['StageType']; // StageType!
  }
  Submission: { // field return type
    id: string; // ID!
    matchGame: NexusGenRootTypes['MatchGame'] | null; // MatchGame
    matchGameId: string | null; // String
    resubmitted: boolean; // Boolean!
    results: NexusGenRootTypes['Result'][]; // [Result!]!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
  }
  Subscription: { // field return type
    chatRoomChanged: NexusGenRootTypes['ChatRoom'] | null; // ChatRoom
    matchChanged: NexusGenRootTypes['Match'] | null; // Match
    ticketChanged: NexusGenRootTypes['Ticket'] | null; // Ticket
    tournamentChanged: NexusGenRootTypes['Tournament'] | null; // Tournament
  }
  Team: { // field return type
    allScoresSubmitted: boolean | null; // Boolean
    avatar: string | null; // String
    averageElo: number | null; // Float
    id: string; // ID!
    kicked: boolean | null; // Boolean
    leader: NexusGenRootTypes['Participant'] | null; // Participant
    leaderId: string | null; // String
    matches: NexusGenRootTypes['Match'][]; // [Match!]!
    name: string; // String!
    participants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    participantsReady: number | null; // Int
    readyChecks: NexusGenRootTypes['ReadyCheck'][]; // [ReadyCheck!]!
    seed: number | null; // Int
  }
  Ticket: { // field return type
    assignee: NexusGenRootTypes['User'] | null; // User
    id: string; // ID!
    match: NexusGenRootTypes['Match'] | null; // Match
    matchBlocked: boolean | null; // Boolean
    matchId: string | null; // String
    message: string | null; // String
    number: number | null; // Int
    reported: NexusGenRootTypes['User'] | null; // User
    reporter: NexusGenRootTypes['User'] | null; // User
    resolved: boolean; // Boolean!
    tournament: NexusGenRootTypes['Tournament'] | null; // Tournament
    tournamentId: string | null; // String
    type: NexusGenEnums['TicketType']; // TicketType!
    verdict: string | null; // String
  }
  Tournament: { // field return type
    activeRound: NexusGenRootTypes['Round'] | null; // Round
    chatRoom: NexusGenRootTypes['ChatRoom'] | null; // ChatRoom
    checkinEnd: NexusGenScalars['DateTime'] | null; // DateTime
    checkinStart: NexusGenScalars['DateTime'] | null; // DateTime
    completedRounds: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    discordLink: string | null; // String
    game: NexusGenRootTypes['Game']; // Game!
    gameId: string; // String!
    gameMode: NexusGenRootTypes['GameMode']; // GameMode!
    gameModeId: string; // String!
    gameUser: NexusGenRootTypes['GameUser'] | null; // GameUser
    hostUser: NexusGenRootTypes['User']; // User!
    id: string; // ID!
    language: NexusGenRootTypes['Language'] | null; // Language
    maxPlayers: number | null; // Int
    noShow: number; // Int!
    participants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    platforms: NexusGenRootTypes['Platform'][]; // [Platform!]!
    players: Array<NexusGenRootTypes['Participant'] | null> | null; // [Participant]
    playersCount: number | null; // Int
    prizePool: string | null; // String
    publishedAt: NexusGenScalars['DateTime'] | null; // DateTime
    region: NexusGenRootTypes['Region'] | null; // Region
    roundsCount: number | null; // Int
    rules: string; // String!
    staff: Array<NexusGenRootTypes['Participant'] | null> | null; // [Participant]
    staffCount: number | null; // Int
    stages: NexusGenRootTypes['Stage'][]; // [Stage!]!
    status: NexusGenEnums['TournamentStatus']; // TournamentStatus!
    streamLink: string | null; // String
    supportLink: string | null; // String
    tickets: NexusGenRootTypes['Ticket'][]; // [Ticket!]!
    title: string; // String!
    unassignedTickets: number | null; // Int
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userRoles: NexusGenEnums['ParticipantRoleType'][] | null; // [ParticipantRoleType!]
    winnerTeam: NexusGenRootTypes['Team'] | null; // Team
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currentHost: NexusGenRootTypes['Participant'] | null; // Participant
    currentMatch: NexusGenRootTypes['Match'] | null; // Match
    currentParticipant: NexusGenRootTypes['Participant'] | null; // Participant
    displayName: string; // String!
    gameUserFromTournament: NexusGenRootTypes['GameUser'] | null; // GameUser
    gameUsers: NexusGenRootTypes['GameUser'][]; // [GameUser!]!
    hideAlphaDisclaimer: boolean; // Boolean!
    id: string; // ID!
    linkedAccounts: NexusGenRootTypes['UserAccount'][]; // [UserAccount!]!
    participantFromTournament: NexusGenRootTypes['Participant'] | null; // Participant
    participants: NexusGenRootTypes['Participant'][]; // [Participant!]!
    permissions: string[]; // [String!]!
    roles: string[]; // [String!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserAccount: { // field return type
    accessToken: string; // String!
    avatar: string | null; // String
    discriminator: string; // String!
    email: string | null; // String
    fetchedAt: string; // String!
    id: string; // ID!
    locale: string; // String!
    mfaEnabled: boolean; // Boolean!
    owner: NexusGenRootTypes['User']; // User!
    provider: string; // String!
    refreshToken: string; // String!
    userId: string; // String!
    username: string; // String!
    verified: boolean; // Boolean!
  }
}

export interface NexusGenFieldTypeNames {
  ChatMessage: { // field return type name
    author: 'User'
    authorId: 'String'
    chatRoom: 'ChatRoom'
    chatRoomId: 'String'
    content: 'String'
    createdAt: 'DateTime'
    id: 'ID'
  }
  ChatRoom: { // field return type name
    archivedAt: 'DateTime'
    id: 'ID'
    members: 'User'
    messages: 'ChatMessage'
    name: 'String'
    tournament: 'Tournament'
    tournamentId: 'String'
  }
  Game: { // field return type name
    gameUsers: 'GameUser'
    homepage: 'String'
    id: 'ID'
    image: 'Image'
    supported: 'Boolean'
    title: 'String'
    tournaments: 'Tournament'
    verified: 'Boolean'
  }
  GameMode: { // field return type name
    id: 'ID'
    name: 'String'
    teamSize: 'Int'
  }
  GameUser: { // field return type name
    elo: 'Int'
    game: 'Game'
    gameId: 'String'
    id: 'ID'
    inGameName: 'String'
    user: 'User'
  }
  Image: { // field return type name
    contentType: 'String'
    game: 'Game'
    id: 'ID'
    name: 'String'
    secret: 'String'
    size: 'Int'
    url: 'String'
  }
  Language: { // field return type name
    code: 'ID'
    name: 'String'
  }
  Match: { // field return type name
    gameLobbyCode: 'String'
    id: 'ID'
    inGame: 'String'
    matchGames: 'MatchGame'
    noShowTimer: 'DateTime'
    number: 'Int'
    opponents: 'Team'
    readyChecks: 'ReadyCheck'
    round: 'Round'
    status: 'MatchStatus'
    supportLink: 'String'
    tickets: 'Ticket'
  }
  MatchGame: { // field return type name
    finalResults: 'Result'
    id: 'ID'
    match: 'Match'
    matchId: 'String'
    number: 'Int'
    result: 'Result'
    status: 'GameStatus'
    submissions: 'Submission'
    submissionsEqual: 'Boolean'
  }
  Mutation: { // field return type name
    addLobbyCode: 'Match'
    addOpponent: 'Match'
    addParticipant: 'Participant'
    addToInGame: 'Match'
    changeStatus: 'Match'
    checkinParticipant: 'Participant'
    closeTicket: 'Ticket'
    createChatMessage: 'ChatMessage'
    createGame: 'Game'
    createMatch: 'Match'
    createMatchGame: 'MatchGame'
    createOrUpdateGameUser: 'GameUser'
    createReadyCheck: 'ReadyCheck'
    createSavestate: 'String'
    createSubmissions: 'Submission'
    createSystemTicket: 'Ticket'
    createTeam: 'Team'
    createTicket: 'Ticket'
    createTournament: 'Tournament'
    deleteMatch: 'Match'
    deleteSavestate: 'Boolean'
    deleteTicket: 'Ticket'
    deleteTournament: 'Tournament'
    generateBrackets: 'String'
    kickParticipant: 'Participant'
    publishBrackets: 'Round'
    removeOpponent: 'Match'
    removeParticipant: 'Participant'
    resetMatch: 'Match'
    resolvePlayerReport: 'Ticket'
    restoreSavestate: 'String'
    setCheckIn: 'Tournament'
    setHideDisclaimer: 'User'
    setMatchGameStatus: 'MatchGame'
    setMatchResults: 'Match'
    setMatchWinner: 'Match'
    setRoundStatus: 'Round'
    setStartTime: 'Tournament'
    setTicketAssignee: 'Ticket'
    setTournamentStatus: 'Tournament'
    setUsername: 'User'
    updateElo: 'GameUser'
    updateParticipantRoles: 'Participant'
    updateSeed: 'Team'
    updateTournament: 'Tournament'
  }
  Participant: { // field return type name
    checkedInAt: 'DateTime'
    deniedMod: 'Boolean'
    id: 'ID'
    isCheckedIn: 'Boolean'
    isCreator: 'Boolean'
    isCurrentUser: 'Boolean'
    isHost: 'Boolean'
    isModerator: 'Boolean'
    isPlayer: 'Boolean'
    isReady: 'Boolean'
    isRegistered: 'Boolean'
    kicked: 'Boolean'
    readyChecks: 'ReadyCheck'
    registeredAt: 'DateTime'
    requestingMod: 'Boolean'
    roles: 'ParticipantRole'
    team: 'Team'
    teamId: 'String'
    tournament: 'Tournament'
    tournamentId: 'String'
    user: 'User'
    userId: 'String'
  }
  ParticipantRole: { // field return type name
    id: 'ID'
    participant: 'Participant'
    participantId: 'String'
    type: 'ParticipantRoleType'
  }
  Platform: { // field return type name
    code: 'ID'
    name: 'String'
  }
  Query: { // field return type name
    chatRoomMessages: 'ChatMessage'
    gameUsers: 'GameUser'
    games: 'Game'
    isCheckedIn: 'Boolean'
    isRegistered: 'Boolean'
    languages: 'Language'
    match: 'Match'
    matchesInTournament: 'Match'
    me: 'User'
    participants: 'Participant'
    participantsFromTournament: 'Participant'
    platforms: 'Platform'
    playersFromTournament: 'Participant'
    regions: 'Region'
    relatedChatRooms: 'ChatRoom'
    relatedTickets: 'Ticket'
    savestates: 'String'
    staffFromTournament: 'Participant'
    team: 'Team'
    tickets: 'Ticket'
    tournament: 'Tournament'
    tournamentStages: 'Stage'
    tournamentTickets: 'Ticket'
    tournaments: 'Tournament'
    user: 'User'
    userAccounts: 'UserAccount'
    userParticipants: 'Participant'
    users: 'User'
  }
  ReadyCheck: { // field return type name
    checkedInAt: 'DateTime'
    id: 'ID'
    lobbyRole: 'String'
    match: 'Match'
    matchId: 'String'
    participant: 'Participant'
  }
  Region: { // field return type name
    code: 'ID'
    name: 'String'
  }
  Result: { // field return type name
    id: 'ID'
    score: 'Int'
    submission: 'Submission'
    submissionId: 'String'
    team: 'Team'
    teamId: 'String'
  }
  Round: { // field return type name
    completedMatches: 'Int'
    format: 'Int'
    id: 'ID'
    locked: 'Boolean'
    matches: 'Match'
    number: 'Int'
    playersInRound: 'Int'
    stage: 'Stage'
    stageId: 'String'
    status: 'RoundStatus'
    title: 'String'
  }
  Stage: { // field return type name
    id: 'ID'
    number: 'Int'
    rounds: 'Round'
    title: 'String'
    tournament: 'Tournament'
    tournamentId: 'String'
    type: 'StageType'
  }
  Submission: { // field return type name
    id: 'ID'
    matchGame: 'MatchGame'
    matchGameId: 'String'
    resubmitted: 'Boolean'
    results: 'Result'
    team: 'Team'
    teamId: 'String'
  }
  Subscription: { // field return type name
    chatRoomChanged: 'ChatRoom'
    matchChanged: 'Match'
    ticketChanged: 'Ticket'
    tournamentChanged: 'Tournament'
  }
  Team: { // field return type name
    allScoresSubmitted: 'Boolean'
    avatar: 'String'
    averageElo: 'Float'
    id: 'ID'
    kicked: 'Boolean'
    leader: 'Participant'
    leaderId: 'String'
    matches: 'Match'
    name: 'String'
    participants: 'Participant'
    participantsReady: 'Int'
    readyChecks: 'ReadyCheck'
    seed: 'Int'
  }
  Ticket: { // field return type name
    assignee: 'User'
    id: 'ID'
    match: 'Match'
    matchBlocked: 'Boolean'
    matchId: 'String'
    message: 'String'
    number: 'Int'
    reported: 'User'
    reporter: 'User'
    resolved: 'Boolean'
    tournament: 'Tournament'
    tournamentId: 'String'
    type: 'TicketType'
    verdict: 'String'
  }
  Tournament: { // field return type name
    activeRound: 'Round'
    chatRoom: 'ChatRoom'
    checkinEnd: 'DateTime'
    checkinStart: 'DateTime'
    completedRounds: 'Int'
    createdAt: 'DateTime'
    date: 'DateTime'
    description: 'String'
    discordLink: 'String'
    game: 'Game'
    gameId: 'String'
    gameMode: 'GameMode'
    gameModeId: 'String'
    gameUser: 'GameUser'
    hostUser: 'User'
    id: 'ID'
    language: 'Language'
    maxPlayers: 'Int'
    noShow: 'Int'
    participants: 'Participant'
    platforms: 'Platform'
    players: 'Participant'
    playersCount: 'Int'
    prizePool: 'String'
    publishedAt: 'DateTime'
    region: 'Region'
    roundsCount: 'Int'
    rules: 'String'
    staff: 'Participant'
    staffCount: 'Int'
    stages: 'Stage'
    status: 'TournamentStatus'
    streamLink: 'String'
    supportLink: 'String'
    tickets: 'Ticket'
    title: 'String'
    unassignedTickets: 'Int'
    updatedAt: 'DateTime'
    userRoles: 'ParticipantRoleType'
    winnerTeam: 'Team'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    currentHost: 'Participant'
    currentMatch: 'Match'
    currentParticipant: 'Participant'
    displayName: 'String'
    gameUserFromTournament: 'GameUser'
    gameUsers: 'GameUser'
    hideAlphaDisclaimer: 'Boolean'
    id: 'ID'
    linkedAccounts: 'UserAccount'
    participantFromTournament: 'Participant'
    participants: 'Participant'
    permissions: 'String'
    roles: 'String'
    updatedAt: 'DateTime'
  }
  UserAccount: { // field return type name
    accessToken: 'String'
    avatar: 'String'
    discriminator: 'String'
    email: 'String'
    fetchedAt: 'String'
    id: 'ID'
    locale: 'String'
    mfaEnabled: 'Boolean'
    owner: 'User'
    provider: 'String'
    refreshToken: 'String'
    userId: 'String'
    username: 'String'
    verified: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addLobbyCode: { // args
      lobbycode: string; // String!
      matchId: string; // ID!
    }
    addOpponent: { // args
      matchId: string; // ID!
      teamId: string; // ID!
    }
    addParticipant: { // args
      elo?: number | null; // Int
      name?: string | null; // String
      requestingMod?: boolean | null; // Boolean
      tournamentId: string; // ID!
    }
    addToInGame: { // args
      matchId: string; // ID!
    }
    changeStatus: { // args
      matchId: string; // ID!
      status: NexusGenEnums['MatchStatus']; // MatchStatus!
    }
    checkinParticipant: { // args
      tournamentId: string; // ID!
    }
    closeTicket: { // args
      ticketId: string; // ID!
      verdict?: string | null; // String
    }
    createChatMessage: { // args
      chatRoomId: string; // String!
      content: string; // String!
    }
    createGame: { // args
      homepage?: string | null; // String
      title: string; // String!
    }
    createMatch: { // args
      opponentIds: string[]; // [ID!]!
      roundId: string; // ID!
    }
    createMatchGame: { // args
      matchId: string; // ID!
    }
    createOrUpdateGameUser: { // args
      elo: number; // Int!
      gameId: string; // ID!
      inGameName: string; // String!
      userId: string; // ID!
    }
    createReadyCheck: { // args
      matchId: string; // ID!
      participantId: string; // ID!
    }
    createSavestate: { // args
      title?: string | null; // String
    }
    createSubmissions: { // args
      data?: NexusGenInputs['SubmissionCreateInput'][] | null; // [SubmissionCreateInput!]
    }
    createSystemTicket: { // args
      matchBlocked?: boolean | null; // Boolean
      matchId?: string | null; // ID
      message?: string | null; // String
      reportedId?: string | null; // ID
      ticketType: NexusGenEnums['TicketType']; // TicketType!
      tournamentId?: string | null; // ID
    }
    createTeam: { // args
      name: string; // String!
      participantIds?: string[] | null; // [ID!]
      tournamentId: string; // ID!
    }
    createTicket: { // args
      matchBlocked?: boolean | null; // Boolean
      message?: string | null; // String
      reportedId?: string | null; // ID
      reporterId: string; // ID!
      ticketType: NexusGenEnums['TicketType']; // TicketType!
      tournamentId?: string | null; // ID
    }
    createTournament: { // args
      data: NexusGenInputs['TournamentCreateInput']; // TournamentCreateInput!
    }
    deleteMatch: { // args
      matchId: string; // ID!
    }
    deleteSavestate: { // args
      title: string; // String!
    }
    deleteTicket: { // args
      ticketId: string; // ID!
    }
    deleteTournament: { // args
      tournamentId: string; // ID!
    }
    generateBrackets: { // args
      algorithm: string; // String!
      tournamentId: string; // ID!
    }
    kickParticipant: { // args
      participantId: string; // ID!
    }
    publishBrackets: { // args
      bestOfs: Array<NexusGenInputs['BestOfInput'] | null>; // [BestOfInput]!
      publishInput: Array<Array<Array<string | null> | null>>; // [[[String]]!]!
      tournamentId: string; // ID!
    }
    removeOpponent: { // args
      matchId: string; // ID!
      teamId: string; // ID!
    }
    removeParticipant: { // args
      tournamentId: string; // ID!
      userId?: string | null; // ID
    }
    resetMatch: { // args
      matchId: string; // ID!
      ticketId?: string | null; // ID
      verdict?: string | null; // String
    }
    resolvePlayerReport: { // args
      participantId: string; // ID!
      ticketId: string; // ID!
      verdict?: string | null; // String
    }
    restoreSavestate: { // args
      title: string; // String!
    }
    setCheckIn: { // args
      endTime?: NexusGenScalars['DateTime'] | null; // DateTime
      startTime?: NexusGenScalars['DateTime'] | null; // DateTime
      tournamentId: string; // ID!
    }
    setHideDisclaimer: { // args
      hideDisclaimer: boolean; // Boolean!
    }
    setMatchGameStatus: { // args
      matchGameId: string; // ID!
      status?: NexusGenEnums['GameStatus'] | null; // GameStatus
    }
    setMatchResults: { // args
      matchGameResults: NexusGenInputs['MatchResultInput'][]; // [MatchResultInput!]!
      matchId: string; // ID!
      ticketId?: string | null; // ID
      verdict?: string | null; // String
    }
    setMatchWinner: { // args
      matchId: string; // ID!
      ticketId?: string | null; // ID
      verdict?: string | null; // String
      winnerId: string; // ID!
    }
    setRoundStatus: { // args
      locked?: boolean | null; // Boolean
      roundId: string; // ID!
      status?: NexusGenEnums['RoundStatus'] | null; // RoundStatus
    }
    setStartTime: { // args
      startTime?: NexusGenScalars['DateTime'] | null; // DateTime
      tournamentId: string; // ID!
    }
    setTicketAssignee: { // args
      assigneeId: string; // ID!
      ticketId: string; // ID!
    }
    setTournamentStatus: { // args
      status: NexusGenEnums['TournamentStatus']; // TournamentStatus!
      ticketId?: string | null; // ID
      tournamentId: string; // ID!
      verdict?: string | null; // String
    }
    setUsername: { // args
      name: string; // String!
    }
    updateElo: { // args
      elo: number; // Int!
      id: string; // ID!
      tournamentId: string; // ID!
    }
    updateParticipantRoles: { // args
      addRoles?: NexusGenEnums['ParticipantRoleType'][] | null; // [ParticipantRoleType!]
      deniedMod?: boolean | null; // Boolean
      participantId: string; // ID!
      removeRoles?: NexusGenEnums['ParticipantRoleType'][] | null; // [ParticipantRoleType!]
      ticketId?: string | null; // ID
      verdict?: string | null; // String
    }
    updateSeed: { // args
      seed: number; // Int!
      teamId: string; // ID!
    }
    updateTournament: { // args
      data: NexusGenInputs['TournamentCreateInput']; // TournamentCreateInput!
      tournamentId: string; // ID!
    }
  }
  Participant: {
    isCreator: { // args
      matchId: string; // ID!
    }
    isReady: { // args
      matchId: string; // ID!
    }
  }
  Query: {
    chatRoomMessages: { // args
      chatRoomId: string; // ID!
    }
    isCheckedIn: { // args
      tournamentId: string; // ID!
    }
    isRegistered: { // args
      tournamentId: string; // ID!
    }
    match: { // args
      matchId: string; // ID!
    }
    matchesInTournament: { // args
      tournamentId: string; // ID!
    }
    participantsFromTournament: { // args
      tournamentId: string; // ID!
    }
    playersFromTournament: { // args
      tournamentId: string; // ID!
    }
    staffFromTournament: { // args
      tournamentId: string; // ID!
    }
    team: { // args
      teamId: string; // ID!
    }
    tournament: { // args
      tournamentId: string; // ID!
    }
    tournamentStages: { // args
      tournamentId: string; // ID!
    }
    tournamentTickets: { // args
      tournamentId: string; // ID!
    }
    tournaments: { // args
      userHasParticipantRoles?: NexusGenEnums['ParticipantRoleType'][] | null; // [ParticipantRoleType!]
    }
    user: { // args
      userId: string; // ID!
    }
  }
  Subscription: {
    chatRoomChanged: { // args
      actions?: string[] | null; // [String!]
      chatRoomId: string; // ID!
    }
    matchChanged: { // args
      actions?: string[] | null; // [String!]
      matchId: string; // ID!
    }
    ticketChanged: { // args
      actions?: Array<string | null> | null; // [String]
      ticketId?: string | null; // ID
      tournamentId?: string | null; // ID
    }
    tournamentChanged: { // args
      actions?: Array<string | null> | null; // [String]
      tournamentId: string; // ID!
    }
  }
  Team: {
    allScoresSubmitted: { // args
      matchId: string; // ID!
    }
    participantsReady: { // args
      matchId: string; // ID!
    }
  }
  User: {
    gameUserFromTournament: { // args
      tournamentId: string; // ID!
    }
    participantFromTournament: { // args
      tournamentId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}